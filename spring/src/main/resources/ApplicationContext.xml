<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--Aop-->
    <!--1.将通知类放到Spring容器中-->

    <bean id="myAdvice" class="com.it.aop.MyAdvice"/>

    <!--2.-->
    <aop:config>
        <!--2.1 引用通知类对象-->
        <aop:aspect ref="myAdvice">
            <!--2.2-->
            <aop:pointcut id="myPointCut" expression="execution(* com.it.dao..*.*(..))"/>
            <!--2.3 加入各种通知-->

            <!--环绕通知-->
            <aop:around method="AroundAdvice" pointcut-ref="myPointCut"/>



       <!--  &lt;!&ndash;前置通知&ndash;&gt;
         <aop:before method="beforeAdvice" pointcut-ref="myPointCut"/>

         &lt;!&ndash;后置通知&ndash;&gt;
         <aop:after-returning method="afterReturningAdvice" pointcut-ref="myPointCut"/>

         &lt;!&ndash;异常通知&ndash;&gt;
         <aop:after-throwing method="exceptionAdvice" pointcut-ref="myPointCut"/>

         &lt;!&ndash;最终通知&ndash;&gt;
         <aop:after method="finallyAdvice" pointcut-ref="myPointCut"/>-->
        </aop:aspect>
    </aop:config>


    <!--set方法注入
        list map set properties...
    -->
    <!--<bean id="userService" class="com.it.service.UserService" p:userDaoX-ref="userDao2"/>-->

    <!--<bean id="userService" class="com.it.service.UserService">
        <property name="userDaoX">
            <bean class="com.it.dao.UserDaoImpl2"/>
        </property>
    </bean>-->


    <!--<bean id="userService" class="com.it.service.UserService">
        <property name="userDaoX">
            <ref bean="userDao"/>
        </property>
    </bean>-->

    <!--<bean id="userService" class="com.it.service.UserService">
        <property name="userDaoX" ref="userDao2"/>
    </bean>-->

    <!-- <bean id="bookService" class="com.it.service.BookService" p:bookName="Head First java" p:num="1000">
        <property name="lists">
            <list>
                <value>list1</value>
                <value>list2</value>
                <value>list3</value>
            </list>
        </property>
        <property name="sets">
            <set>
                <value>set1</value>
                <value>set2</value>
            </set>
        </property>
        <property name="maps">
            <map>
                <entry key="k1" value="v1"/>
                <entry key="k2" value="v2"/>
                <entry key="k3" value="v3"/>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="k1">v1</prop>
                <prop key="k2">v2</prop>
            </props>
        </property>
        <property name="userDao" ref="userDao2"/>
    </bean>
-->

    <!--
    自动注入
        1.byName:根据setXXX()方法的XXX部分的名字从Spring容器中获取对象，并自动注入到当前类中
        2.byType:根据set方法参数的类型从Spring容器中查找符合的对象，并自动注入到当前类中，如果
        Spring容器中有一个以上的符合类型则抛出异常
        3.constructor:根据构造方法的参数的名字从Spring容器中查找对象，如果没有找到再根据参数的类型从Spring容器中查
    -->

    <!--<bean id="userService" class="com.it.service.UserService" autowire="constructor"/>-->


    <bean id="userDao1" class="com.it.dao.UserDaoImpl1"/>
    <bean id="userDao2" class="com.it.dao.UserDaoImpl2"/>

    <!-- <bean id="userService" class="com.it.service.UserService">
         <property name="userDao" ref="userDao2"/>
     </bean>-->


    <!--构造方法注入-->

    <!--构造方法中根据参数名注入-->
    <!--<bean id="userService" class="com.it.service.UserService">
        <constructor-arg name="user" ref="userDao2"/>
    </bean>-->
    <!--根据方法的参数类型注入-->
    <!--<bean id="userService" class="com.it.service.UserService">
        <constructor-arg type="com.it.dao.UserDao" ref="userDao2"/>
    </bean>-->
    <!--根据索引注入，索引从0开始-->
    <bean id="userService" class="com.it.service.UserService">
        <constructor-arg index="0" ref="userDao2"/>
    </bean>


    <!--
        lazy-init : true 表示在调用getBean的时候再去创建类的对象（类延迟加载）
    -->
    <!--
        <bean id="userDao5" class="com.it.dao.UserDaoImpl1" lazy-init="true"/>
    -->
    <!--
        scope:默认值 singleton，
        如果修改为prototype则每次调用getBean方法时会获取一个类的对象，容器启动时将不会创建该类的对象
    -->

    <!--
        <bean id="userDao3" class="com.it.dao.UserDaoImpl1" scope="prototype"/>
    -->

    <!--
        init-method 定义类中的初始化方法
        destroy-method 定义类中的销毁方法
    -->
    <!--
         <bean id="userDao4" class="com.it.dao.UserDaoImpl2"/>
    -->
    <!--别名 将userDao产生另一个名字myDao-->
    <!--<alias name="userDao" alias="myDao"/>-->


</beans>